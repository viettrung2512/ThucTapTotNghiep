---
import "../../styles/global.css"
---

<style>
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>

<div>
  <section class="p-8 w-full max-w-[500px] mx-auto">
    <div class="bg-white rounded-2xl shadow-[0_8px_32px_rgba(0,0,0,0.08)] p-12 border border-gray-200 animate-[fadeIn_0.6s_ease-out_forwards] max-w-[800px] w-full">
      <div class="text-center mb-8">
        <h1 class="text-2xl font-semibold text-gray-900 leading-tight">Login</h1>
        <p class="text-gray-600 text-base mt-2">Welcome back! Please login to your account.</p>
      </div>
      <form id="login-form" class="space-y-4">
        <div class="mb-6">
          <label for="login-username" class="block text-sm font-medium text-gray-900 mb-3">Username</label>
          <input
            id="login-username"
            type="text"
            class="w-full max-w-md px-4 py-3 text-base text-gray-900 bg-white border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 hover:border-gray-400 transition duration-200 placeholder:text-gray-400"
            required
          />
        </div>
        <div class="mb-6">
          <label for="login-password" class="block text-sm font-medium text-gray-900 mb-3">Password</label>
          <input
            id="login-password"
            type="password"
            class="w-full max-w-md px-4 py-3 text-base text-gray-900 bg-white border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 hover:border-gray-400 transition duration-200 placeholder:text-gray-400"
            required
          />
        </div>
        <button
          id="login-btn"
          type="submit"
          class="w-full py-3 text-base font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 hover:shadow-md hover:-translate-y-1 active:translate-y-0 transition duration-200 flex items-center justify-center"
        >
          Login
        </button>
        <div id="google-login-btn" class="flex justify-center mt-4"></div>
        <div id="login-error" class="mt-4 text-sm text-center text-red-600 transition-opacity duration-300"></div>
        <p class="text-center mt-6 text-sm text-gray-600">
          Don’t have an account?
          <a href="/signup" class="text-blue-600 font-medium hover:text-blue-700 hover:underline transition duration-200 ml-1">Sign Up</a>
        </p>
      </form>
    </div>
  </section>
</div>

<script src="https://accounts.google.com/gsi/client" async defer></script>
<script>
declare global {
  interface Window {
    google?: any;
  }
}
const API_BASE_URL = import.meta.env.PUBLIC_API_BASE_URL || import.meta.env.VITE_API_BASE_URL;
const form = document.getElementById('login-form');
const usernameInput = document.getElementById('login-username');
const passwordInput = document.getElementById('login-password');
const errorEl = document.getElementById('login-error');
const loginBtn = document.getElementById('login-btn') as HTMLButtonElement | null;

if (form) {
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (errorEl) errorEl.textContent = '';
    if (loginBtn) {
      (loginBtn as HTMLButtonElement).disabled = true;
      loginBtn.textContent = 'Logging in...';
    }
    try {
      if (!usernameInput || !passwordInput) {
        if (errorEl) errorEl.textContent = "Username or password input not found!";
        if (loginBtn) {
          loginBtn.disabled = false;
          loginBtn.textContent = 'Login';
        }
        return;
      }
      const response = await fetch(`${API_BASE_URL}/login`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          username: (usernameInput as HTMLInputElement).value,
          password: (passwordInput as HTMLInputElement).value,
        }),
      });
      if (!response.ok) throw new Error("Invalid username or password!");
      const data = await response.json();
      localStorage.setItem("token", data.token);
      localStorage.setItem("username", data.username);
      localStorage.setItem("profilePicture", data.profilePicture || "");
      localStorage.setItem("userId", data.id);
      localStorage.setItem("userRole", data.userRole);
      window.location.href = data.userRole === "ADMIN" ? "/admin" : "/";
    } catch (err) {
      if (errorEl) errorEl.textContent = err instanceof Error ? err.message : "Login failed!";
      if (loginBtn) {
        (loginBtn as HTMLButtonElement).disabled = false;
        loginBtn.textContent = 'Login';
      }
    }
  });
}

// Google Login
window.onload = function() {
  if (window.google && window.google.accounts && window.google.accounts.id) {
    window.google.accounts.id.initialize({
      client_id: "YOUR_GOOGLE_CLIENT_ID", // <-- Thay bằng client_id của bạn
      callback: async (credentialResponse: any) => {
        try {
          const token = credentialResponse.credential;
          const response = await fetch(`${API_BASE_URL}/api/auth/google`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Accept: "application/json",
            },
            credentials: "include",
            body: JSON.stringify({ token }),
          });
          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.message || "Google login failed!");
          }
          const data = await response.json();
          localStorage.setItem("token", data.token);
          localStorage.setItem("username", data.username);
          localStorage.setItem("profilePicture", data.profilePicture || "/default-avatar.png");
          localStorage.setItem("userId", data.id);
          localStorage.setItem("userRole", data.userRole || "USER");
          window.location.href = data.userRole === "ADMIN" ? "/admin" : "/";
        } catch (error) {
          if (errorEl) errorEl.textContent = error instanceof Error ? error.message : "Google login failed!";
        }
      }
    });
    window.google.accounts.id.renderButton(
      document.getElementById("google-login-btn"),
      { theme: "outline", size: "large" }
    );
  }
};
</script>